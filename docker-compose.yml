services:
  redis: 
    image: redis:7-alpine
    restart: always
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    command: redis-server --requirepass ${REDIS_PASSWORD} --port ${REDIS_PORT}
    volumes: 
      - ./redis_volume:/data
  postgres:
    restart: always
    image: postgres:15-alpine
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - ./postgres_volume:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command: -p ${POSTGRES_PORT}
  localstack:
    restart: always
    image: localstack/localstack:latest
    ports:
      - ${LOCALSTACK_PORT}:4566
    environment:
      PERSISTENCE: 1
      DISABLE_CORS_CHECKS: 1
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./scripts/localstack:/docker-entrypoint-initaws.d
      - ./localstack_volume:/tmp/localstack
  client:
    depends_on:
     - redis
     - server
     - postgres
     - localstack
    restart: always
    build:
      context: .
      dockerfile: docker/Dockerfile.dev_client
    ports:
      - ${REACT_PORT}:3000
    env_file:
      - .env
    volumes:
      - ./client/src:/usr/local/app/src
  server:
    depends_on:
     - redis
     - postgres
     - localstack
    restart: always
    build:
      context: .
      dockerfile: docker/Dockerfile.dev_server
    ports:
      - ${API_PORT}:3001
    env_file:
      - .env
    volumes:
      - ./server/src:/usr/local/app/src
      - ./server/prisma:/usr/local/app/prisma
  # worker:
  #   # depends_on:
  #   #  - redis
  #   #  - postgres
  #   #  - localstack
  #   # - server
  #   restart: always
  #   build:
  #     context: .
  #     dockerfile: docker/Dockerfile.dev_server
  #   ports:
  #     - ${API_PORT}:3001
  #   environment:
  #     TIDAL_WORKER: 1
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./server/src:/usr/local/app/src